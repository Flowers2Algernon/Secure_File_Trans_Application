image: python:3.12 # Default image for steps unless overridden

definitions:
  caches:
    pip: ~/.cache/pip
    npm: ~/.npm
  services: # <<< CORRECT: Global service definitions go here, under 'definitions'
    postgres:
      image: postgres:15 # Define the 'postgres' service
      variables:
        POSTGRES_DB: test_db
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
  steps:
    - step: &python-lint
        name: Python Linting
        caches:
          - pip
        script:
          # - cd backend_directory # If your Python code isn't at the root
          - pip install flake8 black
          - flake8 --max-line-length=100 . # Or specify path
          - black --check --line-length 100 . # Or specify path

    - step: &django-test
        name: Django Backend Setup (Tests Skipped)
        caches:
          - pip
        services: # <<< This *uses* the 'postgres' service defined under definitions.services
          - postgres
        script:
          # - cd backend_directory # If 'manage.py' and 'requirements.txt' are not at the root
          - |
            if [ ! -f requirements.txt ]; then
              echo "requirements.txt not found!"
              exit 1
            fi
          - pip install -r requirements.txt
          # Configure Django to use the service database
          - export POSTGRES_DB=${POSTGRES_DB:-test_db} # Use the service variable, or default
          - export POSTGRES_USER=${POSTGRES_USER:-postgres}
          - export POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
          - export POSTGRES_HOST=localhost # Service is available on localhost for the step
          - export POSTGRES_PORT=5432
          # Ensure your Django settings.py can pick these up

          - python manage.py collectstatic --no-input --clear
          - echo "Skipping Django tests for now as they are not yet written."
          # - python manage.py test transfer --keepdb
          # - pip install coverage
          # - coverage run --source=transfer manage.py test transfer
          # - coverage report
          # - coverage xml
        # artifacts:
        #   - coverage.xml

    - step: &node-test
        name: Frontend Setup (Tests Skipped)
        image: node:18
        caches:
          - npm
        script:
          - |
            if [ ! -d "transfer/static" ]; then
              echo "Directory 'transfer/static' not found! Please check your frontend path."
              echo "Attempting to create dummy package.json if path doesn't lead to a frontend project."
              # mkdir -p transfer/static # Uncomment to create if it MUST exist for a later command
              # cd transfer/static
              # echo '{ "name": "dummy-frontend", "version": "0.1.0", "scripts": { "test": "echo No frontend tests yet", "test:coverage": "echo No frontend coverage yet" } }' > package.json
            else
              cd transfer/static # Make sure this is your actual frontend code directory
            fi
          - |
            if [ ! -f package.json ]; then
              echo "package.json not found in $(pwd)!"
              echo "Creating a dummy package.json to allow npm install to proceed."
              echo '{ "name": "dummy-frontend", "version": "0.1.0", "private": true, "scripts": { "test": "echo No real frontend tests yet && exit 0", "test:coverage": "echo No real frontend coverage yet && exit 0" } }' > package.json
            fi
          - npm install --legacy-peer-deps
          - echo "Skipping Frontend tests for now as they are not yet written or 'test' script might be missing."
          - npm run test
          - npm run test:coverage
        # artifacts:
        #  - transfer/static/coverage/**

    - step: &security-scan
        name: Security Scan
        script:
          # - cd backend_directory # If requirements.txt is there
          - pip install safety bandit
          - |
            if [ ! -f requirements.txt ]; then
              echo "requirements.txt not found for safety check!"
            else
              safety check -r requirements.txt || echo "Safety check found vulnerabilities (non-blocking for now)"
            fi
          - bandit -r . -x "*/tests/**,*/migrations/**" --level MEDIUM --confidence MEDIUM || echo "Bandit found issues (non-blocking for now)"

pipelines:
  default:
    - parallel:
      - step: *python-lint
      - step: *django-test
      - step: *node-test

  branches:
    development:
      - parallel:
        - step: *python-lint
        - step: *django-test
        - step: *node-test
        - step: *security-scan
  branches:
    main:
      - step: # 可能有一些最终的检查或构建
          name: 'Final Checks for Production'
          script:
            - echo "Running final checks for production..."
            # 例如，运行生产模式的测试，构建最终的生产包
      - step:
          name: 'Deploy to Production'
          deployment: production
          trigger: manual # 关键！手动触发生产部署
          script:
            - echo "Starting deployment to PRODUCTION..."
            # - ./deploy_to_production.sh # 你的生产部署脚本
            - echo "Deployment to PRODUCTION complete."

  pull-requests:
    '**':
      - parallel:
        - step: *python-lint
        - step: *django-test
        - step: *node-test
        - step: *security-scan

  custom:
    security-scan:
      - step: *security-scan

    deploy-staging: # Placeholder
      - step:
          name: Deploy to Staging (Placeholder)
          deployment: staging
          script:
            # - cd backend_directory
            - |
              if [ -f requirements.txt ]; then
                pip install -r requirements.txt
              fi
            - echo "Skipping tests for staging deployment for now."
            - echo "Deploying to staging environment... (Placeholder)"

    deploy-production: # Placeholder
      - step:
          name: Deploy to Production (Placeholder)
          deployment: production
          trigger: manual
          script:
            # - cd backend_directory
            - |
              if [ -f requirements.txt ]; then
                pip install -r requirements.txt
              fi
            - echo "Skipping tests for production deployment for now."
            - echo "Deploying to production environment... (Placeholder)"